#!/usr/bin/env bash

# Фейковый npm
# Нужен для кэширования папки node_modules
# Кэш находится в папке ~/.cache/npm-inject/[sha1 хэш файла package.json]/node_modules
# 
# В PATH надо добавить путь папки с фейковым npm, таким образом при выполнении команды `npm install` 
# bash вызовет фейковый npm c параметром `install`.
# Фейк проверяет наличие папки [sha1 хэш файла package.json] в кэше.
# Если она в кэше, создаем на неё симлинк node_modules 
# Иначе вызываем оригинальный npm (вторая позиция в `which -a npm`), копируем node_modules в кэш
#
# Если указать переменную окружения NPM_INJECT_COPY=1, то вместо симлинка кэш будет скопирован.
#
# При указании времени жизни кэша в переменную окружения $NPM_CACHE_EXPIRE_DAYS
# кэш будет удаляться после истечения срока жизни.
# Время жизни кэша указывается в днях.
#
# @author Shuhrat Shadmonkulov <zumra6a@yandex-team.ru>

set -e
[[ -n ${DEBUG} ]] && set -x

INSTALL="false"
ARGUMENTS=$@
NPM=$(which -a npm | sed -n 2p) # Ищем оригинальный npm

: ${NPM_INJECT_CACHE_DIR:=${HOME}/.cache/npm-inject}
: ${NODE_VERSION:=$(node --version)}
# Если NODE_ENV=production, npm не установит модули из devDependencies.
# https://docs.npmjs.com/cli/install
: ${NODE_ENV:=development}

while [ "$#" -gt "0" ]; do
  case $1 in
    i|install)
      INSTALL="true"
      ;;
  esac
  shift
done

# Если в параметрах нет i или install, вызываем оригинальный npm
if [[ ${INSTALL} == "false" ]]; then
  ${NPM} ${ARGUMENTS}
  exit $?
fi

echo "==> Running npm wrapper script with node_modules caching"

# Если существует переменная времени жизни кэша, то ищем просроченные кэши
if [[ -n ${NPM_CACHE_EXPIRE_DAYS} ]]; then
  echo "Looking for expired cache"

  EXPIRED_DIRS=$(find ${NPM_INJECT_CACHE_DIR} -maxdepth 1 -mtime +${NPM_CACHE_EXPIRE_DAYS} ! -path ${NPM_INJECT_CACHE_DIR} -type d)

  if [[ -n ${EXPIRED_DIRS} ]]; then
    for EXPIRED_DIR in ${EXPIRED_DIRS}; do
      echo "Clear expired cache: ${EXPIRED_DIR}"
      rm -rf "${EXPIRED_DIR}"
    done
  else
    echo "No expired cache found"
  fi
fi

SHRINKWRAP="${PWD}/npm-shrinkwrap.json"
PACKAGE_DEPS="${PWD}/package.json"

if [[ -f ${SHRINKWRAP} ]]; then
    PACKAGE_DEPS=${SHRINKWRAP}
fi

PACKAGES_HASH=$(openssl sha1 ${PACKAGE_DEPS} | awk '{print $2}')
echo "sha1 of ${PACKAGE_DEPS} is ${PACKAGES_HASH}"

NODE_MODULES="${PWD}/node_modules"
PACKAGES_CACHE_DIR="${NPM_INJECT_CACHE_DIR}/${NODE_VERSION}-${NODE_ENV}/${PACKAGES_HASH}"

# Удаляем существующие модули, могли протухнуть
echo "Removing existing node_modules if any"
rm -rf "${NODE_MODULES}"

# Если существует кэш, слинковать его в $NODE_MODULES
if [[ -d ${PACKAGES_CACHE_DIR} ]]; then
  echo "Cache found: ${PACKAGES_CACHE_DIR}"
else
  echo "Cache not found"

  # Вызываем оригинальный npm
  echo "==> Executing: ${NPM} ${ARGUMENTS}"
  ${NPM} ${ARGUMENTS}

  NPM_EXIT_CODE=$?

  if [[ ${NPM_EXIT_CODE} -ne 0 ]]; then
    echo "Something went wrong!"
    exit ${NPM_EXIT_CODE}
  fi

  echo "==> Creating ${PACKAGES_CACHE_DIR}"
  mkdir -p "${PACKAGES_CACHE_DIR}"

  echo "Caching ${NODE_MODULES}"
  mv "${NODE_MODULES}" "${PACKAGES_CACHE_DIR}"
fi

if [[ -n ${NPM_INJECT_COPY} ]]; then
  echo "Copying ${PACKAGES_CACHE_DIR}/node_modules to ${NODE_MODULES}"
  cp -RP "${PACKAGES_CACHE_DIR}/node_modules" "${NODE_MODULES}"
else
  echo "Linking ${PACKAGES_CACHE_DIR}/node_modules to ${NODE_MODULES}"
  ln -s "${PACKAGES_CACHE_DIR}/node_modules" "${NODE_MODULES}"
fi
